[project]
requires-python = ">=3.8"
name = "youtube-summarizer"

[tool.poetry]
name = "youtube-summarizer"
version = "0.3.0"
description = "A commandline application to summarize youtube videos"
authors = ["Ali <619512+atayarani@users.noreply.github.com>"]
readme = "README.md"
packages = [{ include = "src" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
license = "MIT"
urls = { Homepage = "https://github.com/atayarani/youtube-summarizer" }
keywords = ["youtube", "summarizer", "summarization", "youtube-summarizer"]

[tool.poetry.scripts]
summarize = "src.cli:app"

[tool.poetry.dependencies]
python = "^3.10"
langchain = "^0.1.0"
youtube-transcript-api = "^0.6.2"
langchain-openai = "^0.0.2"
pytube = "^15.0.0"
python-slugify = "^8.0.1"
attrs = "^23.2.0"
yt-dlp = "^2023.12.30"
pydub = "^0.25.1"
assemblyai = "^0.20.2"
typer = "^0.9.0"
jinja2 = "^3.1.3"
rich = "^13.7.0"
returns = { extras = ["compatible-mypy"], version = "^0.22.0" }

[tool.poetry.group.dev.dependencies]
black = { extras = ["d"], version = "^23.12.1" }
isort = "^5.13.2"
pre-commit = "^3.6.0"
ruff = "^0.1.14"
mypy = "^1.5.0"
types-python-slugify = "^8.0.2.20240127"
radon = "^6.0.1"
tox-poetry-installer = { extras = ["poetry"], version = "^0.10.3" }

[tool.poetry.group.test.dependencies]
pytest = "^7.4.4"
pytest-spec = "^3.2.0"
icecream = "^2.1.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
snakeviz = "^2.2.0"
hypothesis = { extras = ["codemods"], version = "^6.97.4" }
python-lorem = "^1.3.0.post1"
lizard = "^1.17.10"

[tool.pytest.ini_options]
addopts = ["--spec", "--cov=src"]
testpaths = ["tests"]

[tool.coverage.report]
show_missing = true
skip_covered = true
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
]

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "I", "C901", "D", "UP", "S", "BLE",
    "B", "N", "TRY", "FLY", "PERF", "FURB", "RUF", "PT", "C4", "RET", "SIM", "ARG", "PTH"]
ignore = ["S101", "D212", "D203", "D100", "D104", "TRY003"]

[tool.ruff.lint.mccabe]
max-complexity = 5

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

# mypy settings as recommended by `returns` library
[tool.mypy]
python_version = "3.10"
#exclude = ["tests", "pyproject.toml", 'src/__pycache__']
allow_redefinition = false
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = false
local_partial_types = true
no_implicit_optional = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
plugins = ["returns.contrib.mypy.returns_plugin"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
