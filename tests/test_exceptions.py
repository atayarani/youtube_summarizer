# Generated by CodiumAI

import pytest

from src.exceptions import NoTranscriptFound, TranscriptsDisabled


class TestNoTranscriptFound:

    # NoTranscriptFound exception is raised with default message "No transcript found"
    def test_default_message(self):
        with pytest.raises(NoTranscriptFound) as exc_info:
            raise NoTranscriptFound()
        assert str(exc_info.value) == "No transcript found"

    # NoTranscriptFound exception is raised with custom message
    def test_custom_message(self):
        custom_message = "Custom message"
        with pytest.raises(NoTranscriptFound) as exc_info:
            raise NoTranscriptFound(custom_message)
        assert str(exc_info.value) == custom_message

    # NoTranscriptFound exception can be caught and handled appropriately
    def test_catch_exception(self):
        try:
            raise NoTranscriptFound()
        except NoTranscriptFound:
            assert True

    # NoTranscriptFound exception is raised with empty message
    def test_empty_message(self):
        with pytest.raises(NoTranscriptFound) as exc_info:
            raise NoTranscriptFound("")
        assert str(exc_info.value) == ""

    # NoTranscriptFound exception is raised with message containing special characters
    def test_special_characters(self):
        special_message = "!@#$%^&*()_+"
        with pytest.raises(NoTranscriptFound) as exc_info:
            raise NoTranscriptFound(special_message)
        assert str(exc_info.value) == special_message

    # NoTranscriptFound exception is raised with message exceeding maximum length
    def test_max_length(self):
        long_message = "a" * 1000
        with pytest.raises(NoTranscriptFound) as exc_info:
            raise NoTranscriptFound(long_message)
        assert str(exc_info.value) == long_message


class TestTranscriptsDisabled:

    # TranscriptsDisabled is raised with default message
    def test_default_message(self):
        with pytest.raises(TranscriptsDisabled) as exc_info:
            raise TranscriptsDisabled()
        assert str(exc_info.value) == "Transcripts disabled"

    # TranscriptsDisabled is raised with custom message
    def test_custom_message(self):
        with pytest.raises(TranscriptsDisabled) as exc_info:
            raise TranscriptsDisabled("Custom message")
        assert str(exc_info.value) == "Custom message"

    # TranscriptsDisabled is raised with empty message
    def test_empty_message(self):
        with pytest.raises(TranscriptsDisabled) as exc_info:
            raise TranscriptsDisabled("")
        assert str(exc_info.value) == ""

    # TranscriptsDisabled is raised with message containing special characters
    def test_special_characters_message(self):
        with pytest.raises(TranscriptsDisabled) as exc_info:
            raise TranscriptsDisabled("Message with special characters: !@#$%^&*()")
        assert str(exc_info.value) == "Message with special characters: !@#$%^&*()"

    # TranscriptsDisabled is raised with message exceeding character limit
    def test_exceed_character_limit_message(self):
        long_message = "a" * 1000
        with pytest.raises(TranscriptsDisabled) as exc_info:
            raise TranscriptsDisabled(long_message)
        assert str(exc_info.value) == long_message

    # TranscriptsDisabled is raised in a try-except block
    def test_try_except_block(self):
        try:
            raise TranscriptsDisabled()
        except TranscriptsDisabled as exc:
            assert str(exc) == "Transcripts disabled"
