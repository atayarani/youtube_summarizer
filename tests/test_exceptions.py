# Generated by CodiumAI
import re

import pytest
from youtube_cheatsheet.exceptions import (
    NoTranscriptFoundError,
    TranscriptsDisabledError,
)


class TestNoTranscriptFound:
    """Test method to verify that the NoTranscriptFoundError is raised with the correct message."""

    # NoTranscriptFound exception is raised with default message "No transcript found"
    def test_default_message(self):
        """
        Test method to verify that the NoTranscriptFoundError is raised with the correct message.

        :param self: The current object
        :raises NoTranscriptFoundError: If NoTranscriptFoundError if transcript is not found

        """
        with pytest.raises(NoTranscriptFoundError, match="No transcript found"):
            raise NoTranscriptFoundError()

    # NoTranscriptFound exception is raised with custom message
    def test_custom_message(self):
        """
        Test the custom message of NoTranscriptFoundError exception.

        This method raises a NoTranscriptFoundError exception with a custom message and
        verifies that the custom message is matched in the raised exception.

        :param self: The current instance of the test case.

        """
        custom_message = "Custom message"
        with pytest.raises(NoTranscriptFoundError, match=custom_message):
            raise NoTranscriptFoundError(custom_message)

    # NoTranscriptFound exception can be caught and handled appropriately
    def test_catch_exception(self):
        """
        Test method to catch NoTranscriptFoundError exception.

        This method uses the `pytest.raises` context manager to catch the `NoTranscriptFoundError` exception.
        It raises the exception and verifies that it is caught.

        :param self: The current instance of the test case.
        :returns: None

        """
        with pytest.raises(NoTranscriptFoundError):
            raise NoTranscriptFoundError()

    # NoTranscriptFound exception is raised with empty message
    def test_empty_message(self):
        """
        Test method for handling an empty message.

        The method raises a NoTranscriptFoundError exception with an empty message.
        It then checks whether the exception's value is an empty string.

        :param self: The current instance of the test class.
        :type self: object

        """
        with pytest.raises(NoTranscriptFoundError) as exc_info:
            raise NoTranscriptFoundError("")
        assert str(exc_info.value) == ""

    # NoTranscriptFound exception is raised with message containing special characters
    def test_special_characters(self):
        """
        Test the handling of special characters.

        This method tests the behavior of the system when special characters are included in the message parameter. It raises a NoTranscriptFoundError exception with the special message and verifies that the exception message matches the special message.

        :param self: The current instance of the class.
        """
        special_message = "!@#$%^&*()_+"
        with pytest.raises(NoTranscriptFoundError) as exc_info:
            raise NoTranscriptFoundError(special_message)
        assert str(exc_info.value) == special_message

    # NoTranscriptFound exception is raised with message exceeding maximum length
    def test_max_length(self):
        """
        Test the maximum length of a message.

        This method tests if the correct exception is raised when a long message is given.

        Args:
            self: The object itself.

        Returns:
            None

        Raises:
            NoTranscriptFoundError: If the maximum length of the message is exceeded.
        """
        long_message = "a" * 1000
        with pytest.raises(NoTranscriptFoundError) as exc_info:
            raise NoTranscriptFoundError(long_message)
        assert str(exc_info.value) == long_message


class TestTranscriptsDisabled:
    """A class that contains tests for the TranscriptsDisabledError exception.

    Methods:
    - test_default_message: Tests that the TranscriptsDisabledError exception is raised with the default message.
    - test_custom_message: Tests that the TranscriptsDisabledError exception is raised with a custom message.
    - test_empty_message: Tests that the TranscriptsDisabledError exception is raised with an empty message.
    - test_special_characters_message: Tests that the TranscriptsDisabledError exception is raised with a message containing special characters.
    - test_exceed_character_limit_message: Tests that the TranscriptsDisabledError exception is raised with a message exceeding the character limit.
    - test_try_except_block: Tests that the TranscriptsDisabledError exception is raised in a try-except block.
    """

    # TranscriptsDisabled is raised with default message
    def test_default_message(self):
        """
        Test method to verify the default message of TranscriptsDisabledError.

        This method raises a TranscriptsDisabledError exception and checks if the raised exception's message is equal to "Transcripts disabled".

        :param self: The current object.
        :type self: object
        :return: None
        """
        with pytest.raises(TranscriptsDisabledError) as exc_info:
            raise TranscriptsDisabledError()
        assert str(exc_info.value) == "Transcripts disabled"

    # TranscriptsDisabled is raised with custom message
    def test_custom_message(self):
        """
        Test the custom message of TranscriptsDisabledError.

        This method raises a TranscriptsDisabledError with a custom message and verifies that the raised exception has the
        expected custom message.

        :param self: The object instance.
        """
        with pytest.raises(TranscriptsDisabledError, match="Custom message"):
            raise TranscriptsDisabledError("Custom message")

    # TranscriptsDisabled is raised with empty message
    def test_empty_message(self) -> None:
        """
        Test the scenario where an empty message is passed to the TranscriptsDisabledError exception.

        Parameters:
        - self: The instance of the test class.

        Returns: None
        """
        with pytest.raises(TranscriptsDisabledError) as exc_info:
            raise TranscriptsDisabledError("")
        assert str(exc_info.value) == ""

    # TranscriptsDisabled is raised with message containing special characters
    def test_special_characters_message(self):
        """
        Test case for handling special characters in a message.

        This method raises a TranscriptsDisabledError exception and verifies that the exception message
        contains the special characters '!@#$%^&*()
        """
        with pytest.raises(
            TranscriptsDisabledError,
            match=re.escape("Message with special characters: !@#$%^&*()"),
        ):
            raise TranscriptsDisabledError(
                "Message with special characters: !@#$%^&*()"
            )

    # TranscriptsDisabled is raised with message exceeding character limit
    def test_exceed_character_limit_message(self):
        """
        Test case for checking if exception is raised when the message exceeds the character limit.

        In this test case, a long message is created by repeating the character 'a' 1000 times.
        The test verifies that when a TranscriptsDisabledError is raised with this long message,
        the exception is caught and its string representation matches the original long message.

        Args:
            self (object): The instance of the current test class.

        Raises:
            TranscriptsDisabledError: If the long message exceeds the character limit.

        Returns:
            None
        """
        long_message = "a" * 1000
        with pytest.raises(TranscriptsDisabledError) as exc_info:
            raise TranscriptsDisabledError(long_message)
        assert str(exc_info.value) == long_message

    # TranscriptsDisabled is raised in a try-except block
    def test_try_except_block(self):
        """
        Test a try-except block for raising a specific exception.

        Args:
            self: The current instance of the test.

        Raises:
            TranscriptsDisabledError: If the specified exception is raised with the given error message "Transcripts disabled".

        """
        with pytest.raises(TranscriptsDisabledError, match="Transcripts disabled"):
            raise TranscriptsDisabledError()
