# Generated by CodiumAI
import pytest

from src.transcript import Metadata, Transcript


class TestTranscript:
    # The Transcript object can be compared to another Transcript object with the same content and metadata, and they are considered equal.
    def test_transcript_equality(self):
        # Create two Transcript objects with the same content and metadata
        metadata = Metadata(
            title="Transcript Title",
            publish_date="2022-01-01",
            author="John Doe",
            url="https://www.youtube.com/watch?v=12345",
        )
        transcript1 = Transcript(content="Transcript content", metadata=metadata)
        transcript2 = Transcript(content="Transcript content", metadata=metadata)

        # Assert the equality of the two objects
        assert transcript1 == transcript2

    # Retrieving a transcript from an invalid YouTube URL raises an exception.
    def test_retrieving_transcript_from_invalid_url(self, mocker):
        # Mock the YoutubeLoader class to raise an exception
        mocker.patch(
            "src.transcript.YoutubeLoader.from_youtube_url",
            side_effect=Exception("Invalid URL"),
        )

        # Call the get_transcript method with an invalid URL
        url = "https://www.youtube.com/invalid"
        with pytest.raises(Exception, match="Invalid YouTube URL"):
            Transcript.get_transcript(url)

    # Retrieving a transcript from a valid YouTube URL that does not have a transcript available raises an exception.
    def test_retrieving_transcript_from_url_without_transcript(self, mocker):
        # Mock the YoutubeLoader class to return an empty list
        mock_loader = mocker.Mock()
        mock_loader.load.return_value = []
        mocker.patch(
            "src.transcript.YoutubeLoader.from_youtube_url", return_value=mock_loader
        )

        # Call the get_transcript method with a valid URL without a transcript
        url = "https://www.youtube.com/watch?v=12345"
        with pytest.raises(Exception, match="No transcript available"):
            Transcript.get_transcript(url)

    # Creating a Metadata object with empty or non-string values raises an exception.
    def test_creating_metadata_with_invalid_values(self):
        # Test empty values
        with pytest.raises(ValueError, match="title cannot be empty."):
            Metadata(
                title="",
                publish_date="2022-01-01",
                author="John Doe",
                url="https://example.com/transcript",
            )

        with pytest.raises(ValueError, match="publish_date cannot be empty."):
            Metadata(
                title="Transcript Title",
                publish_date="",
                author="John Doe",
                url="https://example.com/transcript",
            )
        with pytest.raises(ValueError, match="author cannot be empty."):
            Metadata(
                title="Transcript Title",
                publish_date="2022-01-01",
                author="",
                url="https://example.com/transcript",
            )
        with pytest.raises(ValueError, match="url cannot be empty."):
            Metadata(
                title="Transcript Title",
                publish_date="2022-01-01",
                author="John Doe",
                url="",
            )

        # Test non-string values
        with pytest.raises(TypeError, match="title must be a string."):
            Metadata(
                title=123,
                publish_date="2022-01-01",
                author="John Doe",
                url="https://example.com/transcript",
            )
        with pytest.raises(TypeError, match="publish_date must be a string."):
            Metadata(
                title="Transcript Title",
                publish_date=123,
                author="John Doe",
                url="https://example.com/transcript",
            )
        with pytest.raises(TypeError, match="author must be a string."):
            Metadata(
                title="Transcript Title",
                publish_date="2022-01-01",
                author=123,
                url="https://example.com/transcript",
            )
        with pytest.raises(TypeError, match="url must be a string."):
            Metadata(
                title="Transcript Title",
                publish_date="2022-01-01",
                author="John Doe",
                url=123,
            )
